{
	"info": {
		"_postman_id": "f13f800c-20b4-4a5e-b9a8-ec3818adfda9",
		"name": "Books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11838128"
	},
	"item": [
		{
			"name": "Create book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has id, title, and author fields\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Save id to collection variable\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"author\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all books",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "title",
						"value": "\"Legacy Paradigm Liaison\"",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{$randomJobTitle}}\",\r\n    \"author\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"books"
					],
					"query": [
						{
							"key": "title",
							"value": "Legacy Paradigm Liaison",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has id, title, and author fields\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Save id to collection variable\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete book by id",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has id, title, and author fields\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Save id to collection variable\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has id, title, and author fields\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Save id to collection variable\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"book_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/author?author",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"author"
					],
					"query": [
						{
							"key": "author",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has id, title, and author fields\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Save id to collection variable\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"book_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/title?title=test",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"title"
					],
					"query": [
						{
							"key": "title",
							"value": "test"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		}
	]
}